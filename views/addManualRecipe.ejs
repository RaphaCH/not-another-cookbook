<div id="addManualRecipe-container">
  <h1 class="addManualRecipe-title">Add a New Recipe</h1>
  
  <!-- The classes are shared for styling purposes. To manipulate and save data, id's are to be used. -->
<form method="POST" action="/recipes/newRecipe">
  <div class="addManualRecipe-cooking">
    <div class="addManualRecipeform-group field">
      <input
        type="input"
        class="addManualRecipeform-field"
        placeholder="Cooking time"
        name="cookingtime"
        id="addManualRecipe-cookingtime"
        required
      />
      <label for="title" class="addManualRecipeform-label" >Cooking time</label>
    </div>
  </div>

  <div class="addManualRecipe-inputs">
    <div class="addManualRecipeform-group field">
      <input
        type="input"
        class="addManualRecipeform-field"
        placeholder="Title"
        name="title"
        id="addManualRecipe-title"
        required
      />
      <label for="title" class="addManualRecipeform-label">Title</label>
    </div>

    <div class="addManualRecipeform-group field">
      <input
        type="input"
        class="addManualRecipeform-field"
        placeholder="Main ingredient"
        name="mainingredient"
        id="addManualRecipe-mainIngredient"
        required
      />
      <label for="title" class="addManualRecipeform-label">Main ingredient</label>
    </div>

    <div class="addManualRecipe-servings-cooking">
      <div class="addManualRecipe-servings">
        <label
          id="addManualRecipe-servings"
          class="field"
          for="portions-selecting"
          data-value=""
        >
          <span>Portions</span>
          <div id="addManualRecipe-portions" class="psuedo_select" name="portions-selecting">
            <span class="selected"></span>
            <ul id="addManualRecipe-portions-options" class="options">
              <li class="addManualRecipe-options option" data-value="1 pers">1 Pers</li>
              <li class="addManualRecipe-options option" data-value="2 pers">2 Pers</li>
              <li class="addManualRecipe-options option" data-value="3 pers">3 Pers</li>
              <li class="addManualRecipe-options option" data-value="4 pers">4 Pers</li>
              <li class="addManualRecipe-options option" data-value="5 pers">5 Pers</li>
              <li class="addManualRecipe-options option" data-value="6 pers">6 Pers</li>
            </ul>
          </div>
        </label>
      </div>
    </div>
    <h2 class="addManualRecipe-ingredients-title">Ingredients</h2>
    <div class="addManualRecipe-ingredients">
<!-- For the ingredients they have shared class of addManualRecipe-quantity / addManualRecipe-unit / addManualRecipe-ingredientname -->  
      <div class="addManualRecipe-addingredients">
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-quantity"
            placeholder="Quantity"
            name="quantity"
            required
          />
          <label for="quantity" class="addManualRecipeform-label">Quantity</label>
        </div>
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-unit"
            placeholder="Unit"
            name="unit"
            required
          />
          <label for="quantity" class="addManualRecipeform-label">Unit</label>
        </div>
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-ingredientname"
            placeholder="Ingredient name"
            name="ingredientname"
            required
          />
          <label for="ingredientname" class="addManualRecipeform-label">Name</label>
        </div>
        <div class="addManualRecipe-addIngredient">
          <i class="lni lni-plus"></i>
        </div>
      </div>
      <div class="addManualRecipe-addingredients">
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-quantity"
            placeholder="Quantity"
            name="quantity"
            required
          />
          <label for="quantity" class="addManualRecipeform-label">Quantity</label>
        </div>
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-unit"
            placeholder="Unit"
            name="unit"
            required
          />
          <label for="quantity" class="addManualRecipeform-label">Unit</label>
        </div>
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-ingredientname"
            placeholder="Ingredient name"
            name="ingredientname"
            required
          />
          <label for="ingredientname" class="addManualRecipeform-label">Name</label>
        </div>
        <div class="addManualRecipe-addIngredient">
          <i class="lni lni-plus"></i>
        </div>
      </div>
    </div>
    <div class="addManualRecipe-preparation">
      <h2 class="addManualRecipe-preparation">Preparation</h2>
      <div class="addManualRecipe-preparationbox">
        <p class="addManualRecipe-preparationtext" contenteditable="true"></p>
      </div>
    </div>
    <div class="addManualRecipe-select">
      <label
        id="img_category_label"
        class="field"
        for="img_category"
        data-value=""
      >
        <span>Category</span>
        <div id="img_category" class="psuedo_select" name="img_category">
          <span class="selected"></span>
          <ul id="img_category_options" class="options">
            <li class="addManualRecipe-categories option" data-value="category_1">Pasta</li>
            <li class="addManualRecipe-categories option" data-value="category_2">Category 2</li>
          </ul>
        </div>
      </label>
    </div>
    <div class="addManualRecipe-image">
      <label for="imageupload" class="addManualRecipe-uploadtext">Image</label>
      <input
        type="text"
        id="addManualRecipe-imageupload"
        name="imageupload"
        placeholder="Paste image link here"
      />
    </div>

    <button class="addManualRecipe-done">Done</button>
  </form>
  </div>
</div>

<script>
  var util = {
      f: {
        addStyle: function (elem, prop, val, vendors) {
          var i, ii, property, value;
          if (!util.f.isElem(elem)) {
            elem = document.getElementById(elem);
          }
          if (!util.f.isArray(prop)) {
            prop = [prop];
            val = [val];
          }
          for (i = 0; i < prop.length; i += 1) {
            var thisProp = String(prop[i]),
              thisVal = String(val[i]);
            if (typeof vendors !== "undefined") {
              if (!util.f.isArray(vendors)) {
                vendors.toLowerCase() == "all"
                  ? (vendors = ["webkit", "moz", "ms", "o"])
                  : (vendors = [vendors]);
              }
              for (ii = 0; ii < vendors.length; ii += 1) {
                elem.style[vendors[i] + thisProp] = thisVal;
              }
            }
            thisProp = thisProp.charAt(0).toLowerCase() + thisProp.slice(1);
            elem.style[thisProp] = thisVal;
          }
        },
        cssLoaded: function (event) {
          var child = util.f.getTrg(event);
          child.setAttribute("media", "all");
        },
        events: {
          cancel: function (event) {
            util.f.events.prevent(event);
            util.f.events.stop(event);
          },
          prevent: function (event) {
            event = event || window.event;
            event.preventDefault();
          },
          stop: function (event) {
            event = event || window.event;
            event.stopPropagation();
          },
        },
        getSize: function (elem, prop) {
          return parseInt(elem.getBoundingClientRect()[prop], 10);
        },
        getTrg: function (event) {
          event = event || window.event;
          if (event.srcElement) {
            return event.srcElement;
          } else {
            return event.target;
          }
        },
        isElem: function (elem) {
          return util.f.isNode(elem) && elem.nodeType == 1;
        },
        isArray: function (v) {
          return v.constructor === Array;
        },
        isNode: function (elem) {
          return typeof Node === "object"
            ? elem instanceof Node
            : elem &&
                typeof elem === "object" &&
                typeof elem.nodeType === "number" &&
                typeof elem.nodeName === "string" &&
                elem.nodeType !== 3;
        },
        isObj: function (v) {
          return typeof v == "object";
        },
        replaceAt: function (str, index, char) {
          return str.substr(0, index) + char + str.substr(index + char.length);
        },
      },
    },
    form = {
      f: {
        init: {
          register: function () {
            console.clear();
            var child,
              children = document.getElementsByClassName("field"),
              i;
            for (i = 0; i < children.length; i += 1) {
              child = children[i];
              util.f.addStyle(child, "Opacity", 1);
            }
            children = document.getElementsByClassName("psuedo_select");
            for (i = 0; i < children.length; i += 1) {
              child = children[i];
              child.addEventListener("click", form.f.select.toggle);
            }
          },
          unregister: function () {
            //just here as a formallity
            //call this to stop all ongoing timeouts are ready the page for some sort of json re-route
          },
        },
        select: {
          blur: function (field) {
            field.classList.remove("focused");
            var child,
              children = field.childNodes,
              i,
              ii,
              nested_child,
              nested_children;
            for (i = 0; i < children.length; i += 1) {
              child = children[i];
              if (util.f.isElem(child)) {
                if (child.classList.contains("deselect")) {
                  child.parentNode.removeChild(child);
                } else if (child.tagName == "SPAN") {
                  if (!field.dataset.value) {
                    util.f.addStyle(
                      child,
                      ["FontSize", "Top"],
                      ["15px", "32px"]
                    );
                  }
                } else if (child.classList.contains("psuedo_select")) {
                  nested_children = child.childNodes;
                  for (ii = 0; ii < nested_children.length; ii += 1) {
                    nested_child = nested_children[ii];
                    if (util.f.isElem(nested_child)) {
                      if (nested_child.tagName == "SPAN") {
                        if (!field.dataset.value) {
                          util.f.addStyle(
                            nested_child,
                            ["Opacity", "Transform"],
                            [0, "translateY(24px)"]
                          );
                        }
                      } else if (nested_child.tagName == "UL") {
                        util.f.addStyle(
                          nested_child,
                          ["Height", "Opacity"],
                          [0, 0]
                        );
                      }
                    }
                  }
                }
              }
            }
          },
          focus: function (field) {
            field.classList.add("focused");
            var bool = false,
              child,
              children = field.childNodes,
              i,
              ii,
              iii,
              nested_child,
              nested_children,
              nested_nested_child,
              nested_nested_children,
              size = 0;
            for (i = 0; i < children.length; i += 1) {
              child = children[i];
              util.f.isElem(child) && child.classList.contains("deselect")
                ? (bool = true)
                : null;
            }
            if (!bool) {
              child = document.createElement("div");
              child.className = "deselect";
              child.addEventListener("click", form.f.select.toggle);
              field.insertBefore(child, children[0]);
            }
            for (i = 0; i < children.length; i += 1) {
              child = children[i];
              if (
                util.f.isElem(child) &&
                child.classList.contains("psuedo_select")
              ) {
                nested_children = child.childNodes;
                for (ii = 0; ii < nested_children.length; ii += 1) {
                  nested_child = nested_children[ii];
                  if (
                    util.f.isElem(nested_child) &&
                    nested_child.tagName == "UL"
                  ) {
                    size = 0;
                    nested_nested_children = nested_child.childNodes;
                    for (
                      iii = 0;
                      iii < nested_nested_children.length;
                      iii += 1
                    ) {
                      nested_nested_child = nested_nested_children[iii];
                      if (
                        util.f.isElem(nested_nested_child) &&
                        nested_nested_child.tagName == "LI"
                      ) {
                        size += util.f.getSize(nested_nested_child, "height");
                        // console.log("size: " + size);
                      }
                    }
                    util.f.addStyle(
                      nested_child,
                      ["Height", "Opacity"],
                      [size + "px", 1]
                    );
                  }
                }
              }
            }
          },
          selection: function (child, parent) {
            var children = parent.childNodes,
              i,
              ii,
              nested_child,
              nested_children,
              time = 0,
              value;
            if (util.f.isElem(child) && util.f.isElem(parent)) {
              parent.dataset.value = child.dataset.value;
              value = child.innerHTML;
            }
            for (i = 0; i < children.length; i += 1) {
              child = children[i];
              if (util.f.isElem(child)) {
                if (child.classList.contains("psuedo_select")) {
                  nested_children = child.childNodes;
                  for (ii = 0; ii < nested_children.length; ii += 1) {
                    nested_child = nested_children[ii];
                    if (
                      util.f.isElem(nested_child) &&
                      nested_child.classList.contains("selected")
                    ) {
                      if (nested_child.innerHTML) {
                        time = 1e2;
                        util.f.addStyle(
                          nested_child,
                          ["Opacity", "Transform"],
                          [0, "translateY(24px)"],
                          "all"
                        );
                      }
                      setTimeout(
                        function (c, v) {
                          c.innerHTML = v;
                          util.f.addStyle(
                            c,
                            ["Opacity", "Transform", "TransitionDuration", "Font-family", "Color"],
                            [1, "translateY(0px)", ".1s", "Quicksand, sans-serif", "#1C2226"],
                            "all"
                          );
                        },
                        time,
                        nested_child,
                        value
                      );
                    }
                  }
                } else if (child.tagName == "SPAN") {
                  util.f.addStyle(child, ["FontSize", "Top"], ["12px", "8px"]);
                }
              }
            }
          },
          toggle: function (event) {
            util.f.events.stop(event);
            var child = util.f.getTrg(event),
              children,
              i,
              parent;
            switch (true) {
              case child.classList.contains("psuedo_select"):
              case child.classList.contains("deselect"):
                parent = child.parentNode;
                break;
              case child.classList.contains("options"):
                parent = child.parentNode.parentNode;
                break;
              case child.classList.contains("option"):
                parent = child.parentNode.parentNode.parentNode;
                form.f.select.selection(child, parent);
                break;
            }
            parent.classList.contains("focused")
              ? form.f.select.blur(parent)
              : form.f.select.focus(parent);
          },
        },
      },
    };
  window.onload = form.f.init.register;

  let addIngredients = document.querySelectorAll(".lni-plus")
  addIngredients.forEach(addButton => {
    addButton.addEventListener("click", ()=> {
      let addIngredientsDiv = document.querySelector(".addManualRecipe-ingredients")
      let newIngredient = document.createElement("div")
      newIngredient.classList.add("addManualRecipe-addingredients")
      newIngredient.insertAdjacentHTML("beforeend", `<div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-quantity"
            placeholder="Quantity"
            name="quantity"
            required
          />
          <label for="quantity" class="addManualRecipeform-label">Quantity</label>
        </div>
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-unit"
            placeholder="Unit"
            name="unit"
            required
          />
          <label for="quantity" class="addManualRecipeform-label">Unit</label>
        </div>
        <div class="addManualRecipeform-group field">
          <input
            type="input"
            class="addManualRecipeform-field addManualRecipe-ingredientname"
            placeholder="Ingredient name"
            name="ingredientname"
            required
          />
          <label for="ingredientname" class="addManualRecipeform-label">Name</label>
        </div>
        <div class="addManualRecipe-addIngredient">
          <i class="lni lni-plus"></i>
        </div>`)
        addIngredientsDiv.appendChild(newIngredient)
    })
  })
</script>
